{"mappings":"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","sources":["src/index.ts","src/wormscan/index.ts","src/wormscan/Wormscan.ts","src/api-client/index.ts","src/api-client/APIClient.ts","src/governor/index.ts","src/governor/Governor.ts","src/model/index.ts","src/model/ChainId.ts","src/model/PageRequest.ts","src/model/VAASearchCriteria.ts","src/utils/Objects.ts","src/guardian-network/index.ts","src/guardian-network/GuardianNetwork.ts","src/search/index.ts","src/search/Search.ts","src/consts.ts"],"sourcesContent":["export * from \"./wormscan\";\nexport * from \"./governor\";\nexport * from \"./guardian-network\";\nexport * from \"./api-client\";\nexport * from \"./model\";\nexport * from \"./search\";\n","export * from \"./Wormscan\";\n","import { AxiosClient, APIClient } from \"src/api-client\";\nimport { Governor } from \"src/governor\";\nimport { GuardianNetwork } from \"src/guardian-network\";\nimport { Search } from \"src/search\";\nimport { _get } from \"src/utils/Objects\";\n\nexport class Wormscan {\n  private readonly _governor: Governor;\n  private readonly _guardian: GuardianNetwork;\n  private readonly _search: Search;\n\n  constructor(private readonly _client: APIClient) {\n    this._governor = new Governor(this._client);\n    this._guardian = new GuardianNetwork(this._client);\n    this._search = new Search(this._client);\n  }\n\n  get governor(): Governor {\n    return this._governor;\n  }\n\n  get guardianNetwork(): GuardianNetwork {\n    return this._guardian;\n  }\n\n  get search(): Search {\n    return this._search;\n  }\n\n  async isReady(): Promise<boolean> {\n    return this._getStatus(\"/ready\");\n  }\n\n  async isHealth(): Promise<boolean> {\n    return this._getStatus(\"/health\");\n  }\n\n  private async _getStatus(path: string) {\n    try {\n      const payload = await this._client.doGet<{ status: string }>(path);\n      const status = payload.status || \"\";\n      return status === \"OK\";\n    } catch (err) {\n      return false;\n    }\n  }\n}\n\nexport function createClient(baseUrl: string = \"https://api.wormscan.io/api/v1\") {\n  return new Wormscan(new AxiosClient(baseUrl));\n}\n","export * from \"./APIClient\";\n","import axios, { Axios, AxiosError } from \"axios\";\n\nexport interface APIClient {\n  doGet<T>(path: string, params?: any): Promise<T> | T;\n}\n\nexport class AxiosClient implements APIClient {\n  private readonly _client: Axios;\n\n  constructor(baseURL: string) {\n    this._client = axios.create({ baseURL });\n  }\n\n  async doGet<T>(path: string, params?: any): Promise<T> {\n    try {\n      const response = await this._client.get(path, { params });\n      return response.data;\n    } catch (e: any) {\n      const errors = e as Error | AxiosError;\n      throw new Error(errors.message);\n    }\n  }\n}\n","export * from \"./Governor\";\n","import { APIClient } from \"src/api-client\";\nimport { ChainId } from \"src/model\";\nimport { _get } from \"src/utils/Objects\";\n\ntype Notional = {\n  id: string;\n  chainId: ChainId;\n  nodeName: string;\n  notionalLimit: number;\n  availableNotional: number;\n  maxTransactionSize: number;\n  createdAt: Date;\n  updatedAt: Date;\n};\n\ntype Node<C = any, T = any> = {\n  id: string;\n  createdAt: Date;\n  updatedAt: Date;\n  nodeName: string;\n  counter: number;\n  chains: C[];\n  tokens: T[];\n};\n\nexport type ChainNotionalAvailable = Omit<Notional, \"maxTransactionSize\" | \"notionalLimit\">;\n\nexport type NotionalAvailable = Omit<\n  Notional,\n  \"id\" | \"maxTransactionSize\" | \"notionalLimit\" | \"nodeName\" | \"createdAt\" | \"updatedAt\"\n>;\n\nexport type ChainNotionalLimit = Omit<Notional, \"availableNotional\">;\n\nexport type NotionalLimit = Omit<Notional, \"id\" | \"nodeName\" | \"createdAt\" | \"updatedAt\">;\n\nexport type VAA = {\n  sequence: number;\n  chainId: ChainId;\n  emitterAddress: string;\n  notionalValue: number;\n  txHash: string;\n  releaseTime: number;\n};\n\nexport interface Chain {\n  chainId: ChainId;\n  enqueuedVAA: Omit<VAA, \"releaseTime\">[];\n}\n\nexport type NodeConfiguration = Node<ChainConfiguration, TokenConfiguration>;\n\nexport type ChainConfiguration = {\n  chainId: ChainId;\n  notionalLimit: number;\n  bigTransactionSize: number;\n};\n\nexport type TokenConfiguration = {\n  originChainId: ChainId;\n  originAddress: string;\n  price: number;\n};\n\nexport type NodeStatus = Omit<Node<ChainStatus>, \"tokens\" | \"counter\">;\nexport type ChainStatus = {\n  chainId: ChainId;\n  remainingAvailableNotional: number;\n  emitters: EmitterStatus[];\n};\n\nexport type EmitterStatus = {\n  emitterAddress: string;\n  totalEnqueuedVAAs: number;\n};\n\nexport class Governor {\n  constructor(private readonly _client: APIClient) {}\n\n  async getConfiguration(): Promise<NodeConfiguration[]>;\n  async getConfiguration(guardianId: string): Promise<NodeConfiguration>;\n  async getConfiguration(guardianId: string = null) {\n    const effectivePath = guardianId ? `/governor/config/${guardianId}` : \"/governor/config\";\n    const payload = await this._client.doGet<any>(effectivePath);\n    const result = _get(payload, \"data\", []).map(this._mapNodeConfiguration);\n    return guardianId ? result.pop() : result;\n  }\n\n  async getEnqueuedVaas(): Promise<Chain[]>;\n  async getEnqueuedVaas(chainId: ChainId): Promise<VAA[]>;\n  async getEnqueuedVaas(chainId: ChainId = null) {\n    const effectivePath = chainId ? `/governor/enqueued_vaa/${chainId}` : \"/governor/enqueued_vaa\";\n    const payload = await this._client.doGet<any>(effectivePath);\n    const result = _get(payload, \"data\", []);\n    return result.map(chainId ? this._mapVAA : this._mapChainVAA);\n  }\n\n  //TODO API is returning 500\n  async getMaxAvailableNotional(chainId: ChainId) {\n    return this._client.doGet(`/governor/notional/max_available/${chainId}`);\n  }\n\n  async getAvailableNotional(): Promise<NotionalAvailable[]>;\n  async getAvailableNotional(chainId: ChainId): Promise<ChainNotionalAvailable[]>;\n  async getAvailableNotional(chainId: ChainId = null) {\n    const effectivePath = chainId\n      ? `/governor/notional/available/${chainId}`\n      : \"/governor/notional/available\";\n    const payload = await this._client.doGet<any>(effectivePath);\n    const result = _get(payload, \"data\", []);\n    return result.map(chainId ? this._mapChainAvailableNotional : this._mapAvailableNotional);\n  }\n\n  async getNotionalLimit(): Promise<NotionalLimit[]>;\n  async getNotionalLimit(chainId: ChainId): Promise<ChainNotionalLimit[]>;\n  async getNotionalLimit(chainId: ChainId = null) {\n    const effectivePath = chainId\n      ? `/governor/notional/limit/${chainId}`\n      : \"/governor/notional/limit\";\n    const payload = await this._client.doGet<any>(effectivePath);\n    const result = _get(payload, \"data\", []);\n    return result.map(chainId ? this._mapChainNotionalLimit : this._mapNotionalLimit);\n  }\n\n  async getStatus(): Promise<NodeStatus[]>;\n  async getStatus(guardianId: string): Promise<NodeStatus>;\n  async getStatus(guardianId: string = null) {\n    const effectivePath = guardianId ? `/governor/status/${guardianId}` : \"/governor/status\";\n    const payload = await this._client.doGet<any>(effectivePath);\n    if (guardianId) {\n      const result = _get(payload, \"data\", {});\n      return this._mapStatus(result);\n    } else {\n      const result = _get(payload, \"data\", []);\n      return result.map(this._mapStatus);\n    }\n  }\n\n  async getLimit(): Promise<NotionalLimit[]> {\n    const payload = await this._client.doGet<{ data: any }>(\"/governor/limit\");\n    const result = _get(payload, \"data\", []);\n    return result.map(this._mapNotionalLimit);\n  }\n\n  private _mapNodeConfiguration = ({\n    id,\n    nodename,\n    createdAt,\n    updatedAt,\n    counter,\n    chains,\n    tokens,\n  }: any) => ({\n    id,\n    nodeName: nodename,\n    createdAt: new Date(createdAt),\n    updatedAt: new Date(updatedAt),\n    counter,\n    chains: chains?.map(this._mapChainConfiguration),\n    tokens: tokens?.map(this._mapTokenConfiguration),\n  });\n\n  private _mapStatus = ({ id, nodename, chains, createdAt, updatedAt }: any): NodeStatus => ({\n    id,\n    nodeName: nodename,\n    chains: chains.map(this._mapChainStatus),\n    createdAt: new Date(createdAt),\n    updatedAt: new Date(updatedAt),\n  });\n\n  private _mapChainStatus = ({\n    chainid,\n    remainingavailablenotional,\n    emitters,\n  }: any): ChainStatus => ({\n    chainId: ChainId[chainid] as unknown as ChainId,\n    remainingAvailableNotional: remainingavailablenotional,\n    emitters: emitters.map(this._mapEmitterStatus),\n  });\n\n  private _mapEmitterStatus = ({ emitteraddress, totalenqueuedvaas }: any): EmitterStatus => ({\n    emitterAddress: emitteraddress,\n    totalEnqueuedVAAs: totalenqueuedvaas,\n  });\n\n  private _mapChainConfiguration = ({\n    chainid,\n    notionallimit: notionalLimit,\n    bigtransactionsize: bigTransactionSize,\n  }: any): ChainConfiguration => ({\n    chainId: ChainId[chainid] as unknown as ChainId,\n    notionalLimit,\n    bigTransactionSize,\n  });\n\n  private _mapTokenConfiguration = ({\n    originchainid,\n    originaddress: originAddress,\n    price,\n  }: any): TokenConfiguration => ({\n    originChainId: ChainId[originchainid] as unknown as ChainId,\n    originAddress,\n    price,\n  });\n\n  private _mapChainNotionalLimit = ({\n    id,\n    chainId,\n    nodename,\n    notionalLimit,\n    maxTransactionSize,\n    createdAt,\n    updatedAt,\n  }: any): ChainNotionalLimit => ({\n    id,\n    chainId: ChainId[chainId] as unknown as ChainId,\n    nodeName: nodename,\n    notionalLimit,\n    maxTransactionSize,\n    createdAt: new Date(createdAt),\n    updatedAt: new Date(updatedAt),\n  });\n\n  private _mapNotionalLimit = ({\n    chainid,\n    chainId,\n    availableNotional,\n    notionalLimit,\n    maxTransactionSize,\n  }: any): NotionalLimit => ({\n    chainId: ChainId[chainid | chainId] as unknown as ChainId,\n    availableNotional,\n    notionalLimit,\n    maxTransactionSize,\n  });\n\n  private _mapChainAvailableNotional = ({\n    id,\n    chainId,\n    nodeName,\n    availableNotional,\n    createdAt,\n    updatedAt,\n  }: any): ChainNotionalAvailable => ({\n    id,\n    nodeName,\n    chainId: ChainId[chainId] as unknown as ChainId,\n    availableNotional,\n    createdAt: new Date(createdAt),\n    updatedAt: new Date(updatedAt),\n  });\n\n  private _mapAvailableNotional = ({ chainId, availableNotional }: any): NotionalAvailable => ({\n    chainId: ChainId[chainId] as unknown as ChainId,\n    availableNotional,\n  });\n\n  private _mapChainVAA = ({ chainId, enqueuedVaas }: any): Chain => ({\n    chainId: ChainId[chainId] as unknown as ChainId,\n    enqueuedVAA: enqueuedVaas.map(this._mapVAA),\n  });\n\n  private _mapVAA = ({\n    chainid,\n    chainId,\n    sequence,\n    emitterAddress,\n    notionalValue,\n    txHash,\n    releaseTime,\n  }: any): VAA => ({\n    chainId: ChainId[chainid || chainId] as unknown as ChainId,\n    sequence,\n    emitterAddress,\n    notionalValue,\n    txHash,\n    releaseTime,\n  });\n}\n","export * from \"./ChainId\";\nexport * from \"./PageRequest\";\nexport * from \"./VAASearchCriteria\";\n","export enum ChainId {\n  Unset = 0,\n  Solana = 1,\n  Ethereum = 2,\n  Terra = 3,\n  BSC = 4,\n  Polygon = 5,\n  Avalanche = 6,\n  Oasis = 7,\n  Algorand = 8,\n  Aurora = 9,\n  Fantom = 10,\n  Karura = 11,\n  Acala = 12,\n  Klaytn = 13,\n  Celo = 14,\n  Near = 15,\n  Moonbeam = 16,\n  Neon = 17,\n  Terra2 = 18,\n  Injective = 19,\n  Osmosis = 20,\n  Sui = 21,\n  Aptos = 22,\n  Arbitrum = 23,\n  Optimism = 24,\n  PythNet = 26,\n  Xpla = 28,\n  Btc = 29,\n  Base = 30,\n  Sei = 32,\n  Sepolia = 10002,\n  Wormchain = 3104,\n}\n","export enum Order {\n  ASC = \"ASC\",\n  DESC = \"DESC\",\n}\n\nexport interface PageRequest {\n  page: number;\n  pageSize: number;\n  sortOrder: Order;\n}\n\nexport const DefaultPageRequest: PageRequest = { page: 0, pageSize: 10, sortOrder: Order.ASC };\n","type SpecificVAACriteria =\n  | {\n      sequence: number;\n      signer?: string;\n      hash?: string;\n    }\n  | {\n      sequence: number;\n      signer: string;\n      hash: string;\n    };\n\nexport type VAASearchCriteria =\n  | {\n      chainId: number;\n      emmiter?: string;\n      specific?: SpecificVAACriteria;\n    }\n  | {\n      chainId: number;\n      emmiter: string;\n      specific?: SpecificVAACriteria;\n    }\n  | {\n      chainId: number;\n      emmiter: string;\n      specific: SpecificVAACriteria;\n    };\n","export function _get<T>(obj: any, path: string | string[], defaultValue: T) {\n  const pathArray = Array.isArray(path) ? path : path.split(\".\");\n  let currentValue = obj;\n  for (const key of pathArray) {\n    if (currentValue === undefined || currentValue === null) {\n      return defaultValue;\n    } else {\n      currentValue = currentValue[key];\n    }\n  }\n  return currentValue === undefined ? defaultValue : currentValue;\n}\n","export * from \"./GuardianNetwork\";\n","import { APIClient } from \"src/api-client\";\nimport { DefaultPageRequest, PageRequest, VAASearchCriteria } from \"src/model\";\nimport { _get } from \"src/utils/Objects\";\n\nimport {\n  AssetsByVolumeInput,\n  AssetsByVolumeOutput,\n  ChainPairsByTransfersInput,\n  ChainPairsByTransfersOutput,\n  CrossChainActivityInput,\n  CrossChainActivity,\n  DateRange,\n  GetVAAByTxHashInput,\n  GetVAAInput,\n  GlobalTxInput,\n  GlobalTxOutput,\n  LastTxs,\n  Observation,\n  ScoresOutput,\n  VAACount,\n  VAADetail,\n} from \"./types\";\n\nexport class GuardianNetwork {\n  constructor(private readonly _client: APIClient) {}\n\n  async getScores(): Promise<ScoresOutput> {\n    return await this._client.doGet<ScoresOutput>(\"/scorecards\");\n  }\n\n  async getVAA({\n    chainId,\n    emitter,\n    seq,\n    query,\n    pagination = DefaultPageRequest,\n  }: GetVAAInput): Promise<VAADetail | VAADetail[]> {\n    const effectivePath = this._vaaSearchCriteriaToPathSegmentFilter(\"/vaas\", {\n      chainId,\n      emitter,\n      seq,\n    });\n    const payload = await this._client.doGet(effectivePath, {\n      ...query,\n      ...pagination,\n    });\n\n    const result = _get(payload, \"data\", null);\n\n    // When returns VAADetail[] differs when returns a single VAADetail\n    if (result) return result;\n    return payload as VAADetail;\n  }\n\n  async getVAAbyTxHash({ query }: GetVAAByTxHashInput): Promise<VAADetail[]> {\n    const payload = await this._client.doGet<VAADetail>(\"/vaas/\", { ...query });\n    const result = _get(payload, \"data\", []);\n\n    return result;\n  }\n\n  async getGlobalTx({ chainId, emitter, seq, query }: GlobalTxInput): Promise<GlobalTxOutput> {\n    const payload = await this._client.doGet<GlobalTxOutput>(\n      `/global-tx/${chainId}/${emitter}/${seq}`,\n      {\n        ...query,\n      },\n    );\n    return payload;\n  }\n\n  async getVAACount(): Promise<VAACount[]> {\n    const payload = await this._client.doGet<any>(\"/vaas/vaa-counts\");\n    const result = _get(payload, \"data\", []);\n    return result.map(this._mapVAACount);\n  }\n\n  async getAssetsByVolume(\n    params: AssetsByVolumeInput = { timeSpan: \"7d\" },\n  ): Promise<AssetsByVolumeOutput[]> {\n    const payload = await this._client.doGet<AssetsByVolumeOutput>(\"/top-assets-by-volume\", {\n      ...params,\n    });\n    const result = _get(payload, \"assets\", []);\n    return result;\n  }\n\n  async getChainPairsByTransfers(\n    params: ChainPairsByTransfersInput = { timeSpan: \"7d\" },\n  ): Promise<ChainPairsByTransfersOutput[]> {\n    const payload = await this._client.doGet<AssetsByVolumeOutput>(\n      \"/top-chain-pairs-by-num-transfers\",\n      { ...params },\n    );\n    const result = _get(payload, \"chainPairs\", []);\n    return result;\n  }\n\n  async getCrossChainActivity({\n    by,\n    timeSpan,\n  }: CrossChainActivityInput): Promise<CrossChainActivity> {\n    const payload = await this._client.doGet<[]>(\"/x-chain-activity/\", {\n      timeSpan,\n      by,\n    });\n    const result = _get(payload, \"txs\", []);\n    return result;\n  }\n\n  async getLastTxs(range: DateRange): Promise<LastTxs> {\n    const timeSpan = { day: \"1d\", week: \"1w\", month: \"1mo\", \"3-month\": \"3mo\" };\n    const sampleRate = { day: \"1h\", week: \"1d\", month: \"1d\", \"3-month\": \"1d\" };\n\n    return await this._client.doGet<LastTxs>(\n      `/last-txs?timeSpan=${timeSpan[range]}&sampleRate=${sampleRate[range]}`,\n    );\n  }\n\n  async getObservation(): Promise<Observation[]>;\n  async getObservation(criteria: VAASearchCriteria): Promise<Observation[]>;\n  async getObservation(criteria: VAASearchCriteria, page: PageRequest): Promise<Observation[]>;\n  async getObservation(criteria: VAASearchCriteria = null, page: PageRequest = DefaultPageRequest) {\n    const effectivePath = this._observationCriteriaToPathSegmentFilter(\"/observations\", criteria);\n    const payload = await this._client.doGet<[]>(effectivePath, { ...page });\n    return payload || [];\n  }\n\n  private _vaaSearchCriteriaToPathSegmentFilter(\n    prefix: string,\n    criteria: {\n      chainId: number;\n      emitter: string;\n      seq: number;\n    },\n  ) {\n    const { chainId, emitter, seq } = criteria || {};\n    return [prefix, chainId, emitter, seq].filter(segment => !!segment).join(\"/\");\n  }\n\n  private _observationCriteriaToPathSegmentFilter(prefix: string, criteria: VAASearchCriteria) {\n    const { chainId, emmiter, specific } = criteria || {};\n    const { sequence, signer, hash } = specific || {};\n    return [prefix, chainId, emmiter, sequence, signer, hash]\n      .filter(segment => !!segment)\n      .join(\"/\");\n  }\n\n  private _mapVAACount = ({ chainId, count }: any): VAACount => ({ chainId, count });\n}\n","export * from \"./Search\";\n","import axios, { AxiosError } from \"axios\";\nimport { APIClient } from \"src/api-client\";\nimport { COINGECKO_URL } from \"src/consts\";\nimport { DefaultPageRequest } from \"src/model\";\nimport { _get } from \"src/utils/Objects\";\n\nimport {\n  FindVAAByAddressOutput,\n  GetTokenInput,\n  GetTokenOutput,\n  GetTokenPriceInput,\n  GetTokenPriceOutput,\n  GetTransactionsInput,\n  GetTransactionsOutput,\n} from \"./types\";\n\ninterface FindVAAByAddressInput {\n  address: string;\n  page?: number;\n  pageSize?: number;\n}\n\nexport class Search {\n  constructor(private readonly _client: APIClient) {}\n\n  async findVAAByAddress({\n    address,\n    page,\n    pageSize,\n  }: FindVAAByAddressInput): Promise<FindVAAByAddressOutput> {\n    const result = await this._client.doGet<FindVAAByAddressOutput>(`/address/${address}`, {\n      page,\n      pageSize,\n    });\n    return result;\n  }\n\n  async getTransactions({\n    chainId,\n    emitter,\n    seq,\n    query,\n    pagination = DefaultPageRequest,\n  }: GetTransactionsInput): Promise<GetTransactionsOutput> {\n    const effectivePath = this._vaaSearchCriteriaToPathSegmentFilter(\"/transactions\", {\n      chainId,\n      emitter,\n      seq,\n    });\n\n    const payload = await this._client.doGet(effectivePath, {\n      ...query,\n      ...pagination,\n    });\n\n    const result = _get(payload, \"transactions\", null);\n\n    // When returns GetTransactionsOutput[] differs when returns a single GetTransactionsOutput\n    if (result) return result;\n    return payload as GetTransactionsOutput;\n  }\n\n  async getToken({ chainId, tokenAddress }: GetTokenInput): Promise<GetTokenOutput> {\n    const result = await this._client.doGet<GetTokenOutput>(`/token/${chainId}/${tokenAddress}`);\n    return result;\n  }\n\n  /**\n   *\n   * @param coingeckoId is the id of the token on https://www.coingecko.com\n   * @param query.date The date of data snapshot in dd-mm-yyyy eg. 30-12-2022\n   */\n  async getTokenPrice({ coingeckoId, query }: GetTokenPriceInput): Promise<GetTokenPriceOutput> {\n    try {\n      const response = await axios.get(`${COINGECKO_URL}/coins/${coingeckoId}`, { params: query });\n      const { market_data } = response?.data;\n      const { current_price } = market_data;\n      const { usd } = current_price;\n      return { usd };\n    } catch (e: any) {\n      const errors = e as Error | AxiosError;\n      throw new Error(errors.message);\n    }\n  }\n\n  private _vaaSearchCriteriaToPathSegmentFilter(\n    prefix: string,\n    criteria: {\n      chainId: number;\n      emitter: string;\n      seq: number;\n    },\n  ) {\n    const { chainId, emitter, seq } = criteria || {};\n    const seqValue = seq === 0 ? \"0\" : seq;\n    return [prefix, chainId, emitter, seqValue].filter(segment => !!segment).join(\"/\");\n  }\n}\n","export const COINGECKO_URL: string = \"https://api.coingecko.com/api/v3\";\n"],"names":[],"version":3,"file":"main.js.map"}